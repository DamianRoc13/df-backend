#!/bin/bash
# Script de pruebas para verificar las correcciones del backend
# Fecha: 17 de octubre de 2025

BASE_URL="http://localhost:3000/api"

echo "üß™ ===== TESTS DE CORRECCIONES BACKEND ====="
echo ""

# Test 1: Historial de Pagos - P√°gina 1
echo "üìã Test 1: Historial de Pagos - P√°gina 1"
curl -s -X GET "$BASE_URL/history-payments?page=1&pageSize=5" | jq '.'
echo ""
echo "Verificar:"
echo "  - ‚úì Retorna diferentes registros"
echo "  - ‚úì page = 1"
echo "  - ‚úì totalPages calculado correctamente"
echo ""
read -p "¬øTest 1 pas√≥? (s/n): " test1
echo ""

# Test 2: Historial de Pagos - P√°gina 2
echo "üìã Test 2: Historial de Pagos - P√°gina 2"
curl -s -X GET "$BASE_URL/history-payments?page=2&pageSize=5" | jq '.'
echo ""
echo "Verificar:"
echo "  - ‚úì Retorna registros DIFERENTES a p√°gina 1"
echo "  - ‚úì page = 2"
echo ""
read -p "¬øTest 2 pas√≥? (s/n): " test2
echo ""

# Test 3: Filtro por Status
echo "üìã Test 3: Filtrar por status APPROVED"
curl -s -X GET "$BASE_URL/history-payments?status=APPROVED" | jq '.'
echo ""
echo "Verificar:"
echo "  - ‚úì Solo retorna pagos con status=APPROVED"
echo ""
read -p "¬øTest 3 pas√≥? (s/n): " test3
echo ""

# Test 4: B√∫squeda
echo "üìã Test 4: Buscar por texto"
read -p "Ingresa un t√©rmino de b√∫squeda (nombre, c√©dula, email): " search_term
curl -s -X GET "$BASE_URL/history-payments?search=$search_term" | jq '.'
echo ""
echo "Verificar:"
echo "  - ‚úì Retorna resultados que coinciden con '$search_term'"
echo ""
read -p "¬øTest 4 pas√≥? (s/n): " test4
echo ""

# Test 5: Estad√≠sticas
echo "üìä Test 5: Estad√≠sticas del dashboard"
curl -s -X GET "$BASE_URL/history-payments/stats" | jq '.'
echo ""
echo "Verificar:"
echo "  - ‚úì totalRevenue es un n√∫mero"
echo "  - ‚úì successfulPayments es un n√∫mero"
echo "  - ‚úì pendingPayments es un n√∫mero"
echo "  - ‚úì failedPayments es un n√∫mero"
echo ""
read -p "¬øTest 5 pas√≥? (s/n): " test5
echo ""

# Test 6: Checkout de Suscripci√≥n
echo "üí≥ Test 6: Checkout de Suscripci√≥n (Plan Mensual $19)"
echo "Enviando request..."

TIMESTAMP=$(date +%s)
RESPONSE=$(curl -s -X POST "$BASE_URL/payments/subscriptions/checkout" \
  -H "Content-Type: application/json" \
  -d "{
    \"customer\": {
      \"merchantCustomerId\": \"TEST_USER_$TIMESTAMP\",
      \"email\": \"test$TIMESTAMP@example.com\",
      \"givenName\": \"Test\",
      \"middleName\": \"Usuario\",
      \"surname\": \"Prueba\",
      \"identificationDocType\": \"CC\",
      \"identificationDocId\": \"1234567890\",
      \"phone\": \"0987654321\",
      \"street1\": \"Av. Test 123\",
      \"city\": \"Cuenca\",
      \"state\": \"Azuay\",
      \"country\": \"EC\",
      \"postcode\": \"010101\"
    },
    \"payment\": {
      \"merchantTransactionId\": \"TXN_$TIMESTAMP\",
      \"paymentBrand\": \"VISA\",
      \"amount\": 19.00,
      \"currency\": \"USD\",
      \"planType\": \"MONTHLY\",
      \"paymentType\": \"INITIAL\"
    },
    \"returnUrl\": \"https://pay.animussociety.com/payment-success\"
  }")

echo "$RESPONSE" | jq '.'
echo ""

HTTP_CODE=$(echo "$RESPONSE" | jq -r '.statusCode // 200')

if [ "$HTTP_CODE" == "500" ]; then
  echo "‚ùå ERROR: Retorn√≥ error 500 (Internal Server Error)"
  echo ""
  read -p "¬øTest 6 pas√≥? (s/n): " test6
else
  echo "Verificar:"
  echo "  - ‚úì NO retorna error 500"
  echo "  - ‚úì Retorna checkoutId"
  echo "  - ‚úì Retorna status='PENDING'"
  echo "  - ‚úì Retorna redirectUrl o checkoutId v√°lido"
  echo ""
  read -p "¬øTest 6 pas√≥? (s/n): " test6
fi
echo ""

# Test 7: Checkout con Plan Anual
echo "üí≥ Test 7: Checkout de Suscripci√≥n (Plan Anual $49)"
echo "Enviando request..."

TIMESTAMP=$(date +%s)
RESPONSE=$(curl -s -X POST "$BASE_URL/payments/subscriptions/checkout" \
  -H "Content-Type: application/json" \
  -d "{
    \"customer\": {
      \"merchantCustomerId\": \"TEST_USER_$TIMESTAMP\",
      \"email\": \"test$TIMESTAMP@example.com\",
      \"givenName\": \"Test\",
      \"middleName\": \"Usuario\",
      \"surname\": \"Prueba\",
      \"identificationDocType\": \"CC\",
      \"identificationDocId\": \"1234567890\",
      \"phone\": \"0987654321\",
      \"street1\": \"Av. Test 123\",
      \"city\": \"Cuenca\",
      \"state\": \"Azuay\",
      \"country\": \"EC\",
      \"postcode\": \"010101\"
    },
    \"payment\": {
      \"merchantTransactionId\": \"TXN_$TIMESTAMP\",
      \"paymentBrand\": \"VISA\",
      \"amount\": 49.00,
      \"currency\": \"USD\",
      \"planType\": \"YEARLY\",
      \"paymentType\": \"INITIAL\"
    },
    \"returnUrl\": \"https://pay.animussociety.com/payment-success\"
  }")

echo "$RESPONSE" | jq '.'
echo ""

HTTP_CODE=$(echo "$RESPONSE" | jq -r '.statusCode // 200')

if [ "$HTTP_CODE" == "500" ]; then
  echo "‚ùå ERROR: Retorn√≥ error 500 (Internal Server Error)"
  echo ""
  read -p "¬øTest 7 pas√≥? (s/n): " test7
else
  echo "Verificar:"
  echo "  - ‚úì NO retorna error 500"
  echo "  - ‚úì Retorna checkoutId"
  echo "  - ‚úì Retorna status='PENDING'"
  echo ""
  read -p "¬øTest 7 pas√≥? (s/n): " test7
fi
echo ""

# Test 8: Validaci√≥n de Errores
echo "üö® Test 8: Validaci√≥n de datos incompletos"
echo "Enviando request con datos faltantes..."

RESPONSE=$(curl -s -X POST "$BASE_URL/payments/subscriptions/checkout" \
  -H "Content-Type: application/json" \
  -d "{
    \"customer\": {
      \"email\": \"test@example.com\"
    },
    \"payment\": {
      \"amount\": 19.00
    }
  }")

echo "$RESPONSE" | jq '.'
echo ""

HTTP_CODE=$(echo "$RESPONSE" | jq -r '.statusCode // 400')

if [ "$HTTP_CODE" == "400" ]; then
  echo "‚úÖ CORRECTO: Retorn√≥ error 400 (Bad Request)"
  echo "Verificar:"
  echo "  - ‚úì Retorna mensaje de error descriptivo"
  echo "  - ‚úì NO retorna error 500"
  echo ""
  read -p "¬øTest 8 pas√≥? (s/n): " test8
else
  echo "‚ùå ERROR: Esperaba error 400, recibi√≥ $HTTP_CODE"
  read -p "¬øTest 8 pas√≥? (s/n): " test8
fi
echo ""

# Resumen
echo ""
echo "======================================"
echo "üìä RESUMEN DE TESTS"
echo "======================================"
echo ""
echo "Test 1 (Historial P1):     $test1"
echo "Test 2 (Historial P2):     $test2"
echo "Test 3 (Filtro Status):    $test3"
echo "Test 4 (B√∫squeda):         $test4"
echo "Test 5 (Estad√≠sticas):     $test5"
echo "Test 6 (Checkout Monthly): $test6"
echo "Test 7 (Checkout Yearly):  $test7"
echo "Test 8 (Validaciones):     $test8"
echo ""

# Contar tests exitosos
tests_passed=0
[ "$test1" == "s" ] && ((tests_passed++))
[ "$test2" == "s" ] && ((tests_passed++))
[ "$test3" == "s" ] && ((tests_passed++))
[ "$test4" == "s" ] && ((tests_passed++))
[ "$test5" == "s" ] && ((tests_passed++))
[ "$test6" == "s" ] && ((tests_passed++))
[ "$test7" == "s" ] && ((tests_passed++))
[ "$test8" == "s" ] && ((tests_passed++))

echo "‚úÖ Tests exitosos: $tests_passed/8"

if [ $tests_passed -eq 8 ]; then
  echo ""
  echo "üéâ ¬°TODOS LOS TESTS PASARON!"
  echo "El backend est√° listo para deployment."
elif [ $tests_passed -ge 6 ]; then
  echo ""
  echo "‚ö†Ô∏è  La mayor√≠a de tests pasaron."
  echo "Revisar los tests fallidos antes de deployment."
else
  echo ""
  echo "‚ùå Varios tests fallaron."
  echo "Revisar el c√≥digo y corregir antes de deployment."
fi

echo ""
echo "======================================"
